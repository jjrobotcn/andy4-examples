// source: speech.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.speechService.ErrorInfo', null, global);
goog.exportSymbol('proto.speechService.ErrorType', null, global);
goog.exportSymbol('proto.speechService.GetVoiceVolumeRequest', null, global);
goog.exportSymbol('proto.speechService.GetVoiceVolumeResponse', null, global);
goog.exportSymbol('proto.speechService.HibernateRequest', null, global);
goog.exportSymbol('proto.speechService.HibernateResponse', null, global);
goog.exportSymbol('proto.speechService.ListenSpeechEventRequest', null, global);
goog.exportSymbol('proto.speechService.ListenSpeechEventResponse', null, global);
goog.exportSymbol('proto.speechService.ListenSpeechEventResponse.SpeechEventOneofCase', null, global);
goog.exportSymbol('proto.speechService.ResultInfo', null, global);
goog.exportSymbol('proto.speechService.SetParamsRequest', null, global);
goog.exportSymbol('proto.speechService.SetParamsResponse', null, global);
goog.exportSymbol('proto.speechService.SetVoiceVolumeRequest', null, global);
goog.exportSymbol('proto.speechService.SetVoiceVolumeResponse', null, global);
goog.exportSymbol('proto.speechService.SpeechEvent', null, global);
goog.exportSymbol('proto.speechService.SpeechStopRequest', null, global);
goog.exportSymbol('proto.speechService.SpeechStopResponse', null, global);
goog.exportSymbol('proto.speechService.TextToSpeechRequest', null, global);
goog.exportSymbol('proto.speechService.TextToSpeechResponse', null, global);
goog.exportSymbol('proto.speechService.VadInfo', null, global);
goog.exportSymbol('proto.speechService.VadType', null, global);
goog.exportSymbol('proto.speechService.VoiceVolumeInfo', null, global);
goog.exportSymbol('proto.speechService.WakeUpInfo', null, global);
goog.exportSymbol('proto.speechService.WakeUpRequest', null, global);
goog.exportSymbol('proto.speechService.WakeUpResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechService.ErrorInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.speechService.ErrorInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechService.ErrorInfo.displayName = 'proto.speechService.ErrorInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechService.VadInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.speechService.VadInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechService.VadInfo.displayName = 'proto.speechService.VadInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechService.WakeUpInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.speechService.WakeUpInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechService.WakeUpInfo.displayName = 'proto.speechService.WakeUpInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechService.ResultInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.speechService.ResultInfo.repeatedFields_, null);
};
goog.inherits(proto.speechService.ResultInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechService.ResultInfo.displayName = 'proto.speechService.ResultInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechService.ListenSpeechEventRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.speechService.ListenSpeechEventRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechService.ListenSpeechEventRequest.displayName = 'proto.speechService.ListenSpeechEventRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechService.ListenSpeechEventResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.speechService.ListenSpeechEventResponse.oneofGroups_);
};
goog.inherits(proto.speechService.ListenSpeechEventResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechService.ListenSpeechEventResponse.displayName = 'proto.speechService.ListenSpeechEventResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechService.TextToSpeechRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.speechService.TextToSpeechRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechService.TextToSpeechRequest.displayName = 'proto.speechService.TextToSpeechRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechService.TextToSpeechResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.speechService.TextToSpeechResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechService.TextToSpeechResponse.displayName = 'proto.speechService.TextToSpeechResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechService.SpeechStopRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.speechService.SpeechStopRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechService.SpeechStopRequest.displayName = 'proto.speechService.SpeechStopRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechService.SpeechStopResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.speechService.SpeechStopResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechService.SpeechStopResponse.displayName = 'proto.speechService.SpeechStopResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechService.WakeUpRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.speechService.WakeUpRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechService.WakeUpRequest.displayName = 'proto.speechService.WakeUpRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechService.WakeUpResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.speechService.WakeUpResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechService.WakeUpResponse.displayName = 'proto.speechService.WakeUpResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechService.HibernateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.speechService.HibernateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechService.HibernateRequest.displayName = 'proto.speechService.HibernateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechService.HibernateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.speechService.HibernateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechService.HibernateResponse.displayName = 'proto.speechService.HibernateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechService.VoiceVolumeInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.speechService.VoiceVolumeInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechService.VoiceVolumeInfo.displayName = 'proto.speechService.VoiceVolumeInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechService.SetVoiceVolumeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.speechService.SetVoiceVolumeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechService.SetVoiceVolumeRequest.displayName = 'proto.speechService.SetVoiceVolumeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechService.SetVoiceVolumeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.speechService.SetVoiceVolumeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechService.SetVoiceVolumeResponse.displayName = 'proto.speechService.SetVoiceVolumeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechService.GetVoiceVolumeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.speechService.GetVoiceVolumeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechService.GetVoiceVolumeRequest.displayName = 'proto.speechService.GetVoiceVolumeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechService.GetVoiceVolumeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.speechService.GetVoiceVolumeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechService.GetVoiceVolumeResponse.displayName = 'proto.speechService.GetVoiceVolumeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechService.SetParamsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.speechService.SetParamsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechService.SetParamsRequest.displayName = 'proto.speechService.SetParamsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechService.SetParamsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.speechService.SetParamsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechService.SetParamsResponse.displayName = 'proto.speechService.SetParamsResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechService.ErrorInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.speechService.ErrorInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechService.ErrorInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechService.ErrorInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    errorType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    info: jspb.Message.getFieldWithDefault(msg, 2, ""),
    code: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechService.ErrorInfo}
 */
proto.speechService.ErrorInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechService.ErrorInfo;
  return proto.speechService.ErrorInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechService.ErrorInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechService.ErrorInfo}
 */
proto.speechService.ErrorInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.speechService.ErrorType} */ (reader.readEnum());
      msg.setErrorType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfo(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechService.ErrorInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechService.ErrorInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechService.ErrorInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechService.ErrorInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrorType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getInfo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional ErrorType error_type = 1;
 * @return {!proto.speechService.ErrorType}
 */
proto.speechService.ErrorInfo.prototype.getErrorType = function() {
  return /** @type {!proto.speechService.ErrorType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.speechService.ErrorType} value
 * @return {!proto.speechService.ErrorInfo} returns this
 */
proto.speechService.ErrorInfo.prototype.setErrorType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string info = 2;
 * @return {string}
 */
proto.speechService.ErrorInfo.prototype.getInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.speechService.ErrorInfo} returns this
 */
proto.speechService.ErrorInfo.prototype.setInfo = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string code = 3;
 * @return {string}
 */
proto.speechService.ErrorInfo.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.speechService.ErrorInfo} returns this
 */
proto.speechService.ErrorInfo.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechService.VadInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.speechService.VadInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechService.VadInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechService.VadInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    vadType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    vol: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechService.VadInfo}
 */
proto.speechService.VadInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechService.VadInfo;
  return proto.speechService.VadInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechService.VadInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechService.VadInfo}
 */
proto.speechService.VadInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.speechService.VadType} */ (reader.readEnum());
      msg.setVadType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechService.VadInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechService.VadInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechService.VadInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechService.VadInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVadType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getVol();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional VadType vad_type = 1;
 * @return {!proto.speechService.VadType}
 */
proto.speechService.VadInfo.prototype.getVadType = function() {
  return /** @type {!proto.speechService.VadType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.speechService.VadType} value
 * @return {!proto.speechService.VadInfo} returns this
 */
proto.speechService.VadInfo.prototype.setVadType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 vol = 2;
 * @return {number}
 */
proto.speechService.VadInfo.prototype.getVol = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.speechService.VadInfo} returns this
 */
proto.speechService.VadInfo.prototype.setVol = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechService.WakeUpInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.speechService.WakeUpInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechService.WakeUpInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechService.WakeUpInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    angle: jspb.Message.getFieldWithDefault(msg, 1, 0),
    beam: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechService.WakeUpInfo}
 */
proto.speechService.WakeUpInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechService.WakeUpInfo;
  return proto.speechService.WakeUpInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechService.WakeUpInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechService.WakeUpInfo}
 */
proto.speechService.WakeUpInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAngle(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBeam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechService.WakeUpInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechService.WakeUpInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechService.WakeUpInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechService.WakeUpInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAngle();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getBeam();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 angle = 1;
 * @return {number}
 */
proto.speechService.WakeUpInfo.prototype.getAngle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.speechService.WakeUpInfo} returns this
 */
proto.speechService.WakeUpInfo.prototype.setAngle = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 beam = 2;
 * @return {number}
 */
proto.speechService.WakeUpInfo.prototype.getBeam = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.speechService.WakeUpInfo} returns this
 */
proto.speechService.WakeUpInfo.prototype.setBeam = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.speechService.ResultInfo.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechService.ResultInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.speechService.ResultInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechService.ResultInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechService.ResultInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    wordsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    sentenceComplete: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechService.ResultInfo}
 */
proto.speechService.ResultInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechService.ResultInfo;
  return proto.speechService.ResultInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechService.ResultInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechService.ResultInfo}
 */
proto.speechService.ResultInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addWords(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSentenceComplete(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechService.ResultInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechService.ResultInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechService.ResultInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechService.ResultInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWordsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getSentenceComplete();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * repeated string words = 1;
 * @return {!Array<string>}
 */
proto.speechService.ResultInfo.prototype.getWordsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.speechService.ResultInfo} returns this
 */
proto.speechService.ResultInfo.prototype.setWordsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.speechService.ResultInfo} returns this
 */
proto.speechService.ResultInfo.prototype.addWords = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.speechService.ResultInfo} returns this
 */
proto.speechService.ResultInfo.prototype.clearWordsList = function() {
  return this.setWordsList([]);
};


/**
 * optional bool sentence_complete = 2;
 * @return {boolean}
 */
proto.speechService.ResultInfo.prototype.getSentenceComplete = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.speechService.ResultInfo} returns this
 */
proto.speechService.ResultInfo.prototype.setSentenceComplete = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechService.ListenSpeechEventRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.speechService.ListenSpeechEventRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechService.ListenSpeechEventRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechService.ListenSpeechEventRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    withVadVol: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechService.ListenSpeechEventRequest}
 */
proto.speechService.ListenSpeechEventRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechService.ListenSpeechEventRequest;
  return proto.speechService.ListenSpeechEventRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechService.ListenSpeechEventRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechService.ListenSpeechEventRequest}
 */
proto.speechService.ListenSpeechEventRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWithVadVol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechService.ListenSpeechEventRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechService.ListenSpeechEventRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechService.ListenSpeechEventRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechService.ListenSpeechEventRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWithVadVol();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool with_vad_vol = 1;
 * @return {boolean}
 */
proto.speechService.ListenSpeechEventRequest.prototype.getWithVadVol = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.speechService.ListenSpeechEventRequest} returns this
 */
proto.speechService.ListenSpeechEventRequest.prototype.setWithVadVol = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.speechService.ListenSpeechEventResponse.oneofGroups_ = [[2,3,4,5]];

/**
 * @enum {number}
 */
proto.speechService.ListenSpeechEventResponse.SpeechEventOneofCase = {
  SPEECH_EVENT_ONEOF_NOT_SET: 0,
  WAKE_UP_INFO: 2,
  VAD_INFO: 3,
  RESULT_INFO: 4,
  ERROR_INFO: 5
};

/**
 * @return {proto.speechService.ListenSpeechEventResponse.SpeechEventOneofCase}
 */
proto.speechService.ListenSpeechEventResponse.prototype.getSpeechEventOneofCase = function() {
  return /** @type {proto.speechService.ListenSpeechEventResponse.SpeechEventOneofCase} */(jspb.Message.computeOneofCase(this, proto.speechService.ListenSpeechEventResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechService.ListenSpeechEventResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.speechService.ListenSpeechEventResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechService.ListenSpeechEventResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechService.ListenSpeechEventResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    wakeUpInfo: (f = msg.getWakeUpInfo()) && proto.speechService.WakeUpInfo.toObject(includeInstance, f),
    vadInfo: (f = msg.getVadInfo()) && proto.speechService.VadInfo.toObject(includeInstance, f),
    resultInfo: (f = msg.getResultInfo()) && proto.speechService.ResultInfo.toObject(includeInstance, f),
    errorInfo: (f = msg.getErrorInfo()) && proto.speechService.ErrorInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechService.ListenSpeechEventResponse}
 */
proto.speechService.ListenSpeechEventResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechService.ListenSpeechEventResponse;
  return proto.speechService.ListenSpeechEventResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechService.ListenSpeechEventResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechService.ListenSpeechEventResponse}
 */
proto.speechService.ListenSpeechEventResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.speechService.SpeechEvent} */ (reader.readEnum());
      msg.setEventType(value);
      break;
    case 2:
      var value = new proto.speechService.WakeUpInfo;
      reader.readMessage(value,proto.speechService.WakeUpInfo.deserializeBinaryFromReader);
      msg.setWakeUpInfo(value);
      break;
    case 3:
      var value = new proto.speechService.VadInfo;
      reader.readMessage(value,proto.speechService.VadInfo.deserializeBinaryFromReader);
      msg.setVadInfo(value);
      break;
    case 4:
      var value = new proto.speechService.ResultInfo;
      reader.readMessage(value,proto.speechService.ResultInfo.deserializeBinaryFromReader);
      msg.setResultInfo(value);
      break;
    case 5:
      var value = new proto.speechService.ErrorInfo;
      reader.readMessage(value,proto.speechService.ErrorInfo.deserializeBinaryFromReader);
      msg.setErrorInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechService.ListenSpeechEventResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechService.ListenSpeechEventResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechService.ListenSpeechEventResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechService.ListenSpeechEventResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getWakeUpInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.speechService.WakeUpInfo.serializeBinaryToWriter
    );
  }
  f = message.getVadInfo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.speechService.VadInfo.serializeBinaryToWriter
    );
  }
  f = message.getResultInfo();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.speechService.ResultInfo.serializeBinaryToWriter
    );
  }
  f = message.getErrorInfo();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.speechService.ErrorInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional SpeechEvent event_type = 1;
 * @return {!proto.speechService.SpeechEvent}
 */
proto.speechService.ListenSpeechEventResponse.prototype.getEventType = function() {
  return /** @type {!proto.speechService.SpeechEvent} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.speechService.SpeechEvent} value
 * @return {!proto.speechService.ListenSpeechEventResponse} returns this
 */
proto.speechService.ListenSpeechEventResponse.prototype.setEventType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional WakeUpInfo wake_up_info = 2;
 * @return {?proto.speechService.WakeUpInfo}
 */
proto.speechService.ListenSpeechEventResponse.prototype.getWakeUpInfo = function() {
  return /** @type{?proto.speechService.WakeUpInfo} */ (
    jspb.Message.getWrapperField(this, proto.speechService.WakeUpInfo, 2));
};


/**
 * @param {?proto.speechService.WakeUpInfo|undefined} value
 * @return {!proto.speechService.ListenSpeechEventResponse} returns this
*/
proto.speechService.ListenSpeechEventResponse.prototype.setWakeUpInfo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.speechService.ListenSpeechEventResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.speechService.ListenSpeechEventResponse} returns this
 */
proto.speechService.ListenSpeechEventResponse.prototype.clearWakeUpInfo = function() {
  return this.setWakeUpInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speechService.ListenSpeechEventResponse.prototype.hasWakeUpInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional VadInfo vad_info = 3;
 * @return {?proto.speechService.VadInfo}
 */
proto.speechService.ListenSpeechEventResponse.prototype.getVadInfo = function() {
  return /** @type{?proto.speechService.VadInfo} */ (
    jspb.Message.getWrapperField(this, proto.speechService.VadInfo, 3));
};


/**
 * @param {?proto.speechService.VadInfo|undefined} value
 * @return {!proto.speechService.ListenSpeechEventResponse} returns this
*/
proto.speechService.ListenSpeechEventResponse.prototype.setVadInfo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.speechService.ListenSpeechEventResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.speechService.ListenSpeechEventResponse} returns this
 */
proto.speechService.ListenSpeechEventResponse.prototype.clearVadInfo = function() {
  return this.setVadInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speechService.ListenSpeechEventResponse.prototype.hasVadInfo = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ResultInfo result_info = 4;
 * @return {?proto.speechService.ResultInfo}
 */
proto.speechService.ListenSpeechEventResponse.prototype.getResultInfo = function() {
  return /** @type{?proto.speechService.ResultInfo} */ (
    jspb.Message.getWrapperField(this, proto.speechService.ResultInfo, 4));
};


/**
 * @param {?proto.speechService.ResultInfo|undefined} value
 * @return {!proto.speechService.ListenSpeechEventResponse} returns this
*/
proto.speechService.ListenSpeechEventResponse.prototype.setResultInfo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.speechService.ListenSpeechEventResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.speechService.ListenSpeechEventResponse} returns this
 */
proto.speechService.ListenSpeechEventResponse.prototype.clearResultInfo = function() {
  return this.setResultInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speechService.ListenSpeechEventResponse.prototype.hasResultInfo = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ErrorInfo error_info = 5;
 * @return {?proto.speechService.ErrorInfo}
 */
proto.speechService.ListenSpeechEventResponse.prototype.getErrorInfo = function() {
  return /** @type{?proto.speechService.ErrorInfo} */ (
    jspb.Message.getWrapperField(this, proto.speechService.ErrorInfo, 5));
};


/**
 * @param {?proto.speechService.ErrorInfo|undefined} value
 * @return {!proto.speechService.ListenSpeechEventResponse} returns this
*/
proto.speechService.ListenSpeechEventResponse.prototype.setErrorInfo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.speechService.ListenSpeechEventResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.speechService.ListenSpeechEventResponse} returns this
 */
proto.speechService.ListenSpeechEventResponse.prototype.clearErrorInfo = function() {
  return this.setErrorInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speechService.ListenSpeechEventResponse.prototype.hasErrorInfo = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechService.TextToSpeechRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.speechService.TextToSpeechRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechService.TextToSpeechRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechService.TextToSpeechRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechService.TextToSpeechRequest}
 */
proto.speechService.TextToSpeechRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechService.TextToSpeechRequest;
  return proto.speechService.TextToSpeechRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechService.TextToSpeechRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechService.TextToSpeechRequest}
 */
proto.speechService.TextToSpeechRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechService.TextToSpeechRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechService.TextToSpeechRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechService.TextToSpeechRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechService.TextToSpeechRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string text = 1;
 * @return {string}
 */
proto.speechService.TextToSpeechRequest.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.speechService.TextToSpeechRequest} returns this
 */
proto.speechService.TextToSpeechRequest.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechService.TextToSpeechResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.speechService.TextToSpeechResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechService.TextToSpeechResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechService.TextToSpeechResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechService.TextToSpeechResponse}
 */
proto.speechService.TextToSpeechResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechService.TextToSpeechResponse;
  return proto.speechService.TextToSpeechResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechService.TextToSpeechResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechService.TextToSpeechResponse}
 */
proto.speechService.TextToSpeechResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechService.TextToSpeechResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechService.TextToSpeechResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechService.TextToSpeechResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechService.TextToSpeechResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechService.SpeechStopRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.speechService.SpeechStopRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechService.SpeechStopRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechService.SpeechStopRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechService.SpeechStopRequest}
 */
proto.speechService.SpeechStopRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechService.SpeechStopRequest;
  return proto.speechService.SpeechStopRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechService.SpeechStopRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechService.SpeechStopRequest}
 */
proto.speechService.SpeechStopRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechService.SpeechStopRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechService.SpeechStopRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechService.SpeechStopRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechService.SpeechStopRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechService.SpeechStopResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.speechService.SpeechStopResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechService.SpeechStopResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechService.SpeechStopResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechService.SpeechStopResponse}
 */
proto.speechService.SpeechStopResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechService.SpeechStopResponse;
  return proto.speechService.SpeechStopResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechService.SpeechStopResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechService.SpeechStopResponse}
 */
proto.speechService.SpeechStopResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechService.SpeechStopResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechService.SpeechStopResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechService.SpeechStopResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechService.SpeechStopResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechService.WakeUpRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.speechService.WakeUpRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechService.WakeUpRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechService.WakeUpRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    afterWakeUpSpeechText: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechService.WakeUpRequest}
 */
proto.speechService.WakeUpRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechService.WakeUpRequest;
  return proto.speechService.WakeUpRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechService.WakeUpRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechService.WakeUpRequest}
 */
proto.speechService.WakeUpRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAfterWakeUpSpeechText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechService.WakeUpRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechService.WakeUpRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechService.WakeUpRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechService.WakeUpRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAfterWakeUpSpeechText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string after_wake_up_speech_text = 1;
 * @return {string}
 */
proto.speechService.WakeUpRequest.prototype.getAfterWakeUpSpeechText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.speechService.WakeUpRequest} returns this
 */
proto.speechService.WakeUpRequest.prototype.setAfterWakeUpSpeechText = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechService.WakeUpResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.speechService.WakeUpResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechService.WakeUpResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechService.WakeUpResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechService.WakeUpResponse}
 */
proto.speechService.WakeUpResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechService.WakeUpResponse;
  return proto.speechService.WakeUpResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechService.WakeUpResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechService.WakeUpResponse}
 */
proto.speechService.WakeUpResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechService.WakeUpResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechService.WakeUpResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechService.WakeUpResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechService.WakeUpResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechService.HibernateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.speechService.HibernateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechService.HibernateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechService.HibernateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechService.HibernateRequest}
 */
proto.speechService.HibernateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechService.HibernateRequest;
  return proto.speechService.HibernateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechService.HibernateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechService.HibernateRequest}
 */
proto.speechService.HibernateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechService.HibernateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechService.HibernateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechService.HibernateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechService.HibernateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechService.HibernateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.speechService.HibernateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechService.HibernateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechService.HibernateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechService.HibernateResponse}
 */
proto.speechService.HibernateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechService.HibernateResponse;
  return proto.speechService.HibernateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechService.HibernateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechService.HibernateResponse}
 */
proto.speechService.HibernateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechService.HibernateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechService.HibernateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechService.HibernateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechService.HibernateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechService.VoiceVolumeInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.speechService.VoiceVolumeInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechService.VoiceVolumeInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechService.VoiceVolumeInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    vol: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechService.VoiceVolumeInfo}
 */
proto.speechService.VoiceVolumeInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechService.VoiceVolumeInfo;
  return proto.speechService.VoiceVolumeInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechService.VoiceVolumeInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechService.VoiceVolumeInfo}
 */
proto.speechService.VoiceVolumeInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechService.VoiceVolumeInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechService.VoiceVolumeInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechService.VoiceVolumeInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechService.VoiceVolumeInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVol();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 vol = 1;
 * @return {number}
 */
proto.speechService.VoiceVolumeInfo.prototype.getVol = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.speechService.VoiceVolumeInfo} returns this
 */
proto.speechService.VoiceVolumeInfo.prototype.setVol = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechService.SetVoiceVolumeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.speechService.SetVoiceVolumeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechService.SetVoiceVolumeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechService.SetVoiceVolumeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    voiceVolumeInfo: (f = msg.getVoiceVolumeInfo()) && proto.speechService.VoiceVolumeInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechService.SetVoiceVolumeRequest}
 */
proto.speechService.SetVoiceVolumeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechService.SetVoiceVolumeRequest;
  return proto.speechService.SetVoiceVolumeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechService.SetVoiceVolumeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechService.SetVoiceVolumeRequest}
 */
proto.speechService.SetVoiceVolumeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.speechService.VoiceVolumeInfo;
      reader.readMessage(value,proto.speechService.VoiceVolumeInfo.deserializeBinaryFromReader);
      msg.setVoiceVolumeInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechService.SetVoiceVolumeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechService.SetVoiceVolumeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechService.SetVoiceVolumeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechService.SetVoiceVolumeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVoiceVolumeInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.speechService.VoiceVolumeInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional VoiceVolumeInfo voice_volume_info = 1;
 * @return {?proto.speechService.VoiceVolumeInfo}
 */
proto.speechService.SetVoiceVolumeRequest.prototype.getVoiceVolumeInfo = function() {
  return /** @type{?proto.speechService.VoiceVolumeInfo} */ (
    jspb.Message.getWrapperField(this, proto.speechService.VoiceVolumeInfo, 1));
};


/**
 * @param {?proto.speechService.VoiceVolumeInfo|undefined} value
 * @return {!proto.speechService.SetVoiceVolumeRequest} returns this
*/
proto.speechService.SetVoiceVolumeRequest.prototype.setVoiceVolumeInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.speechService.SetVoiceVolumeRequest} returns this
 */
proto.speechService.SetVoiceVolumeRequest.prototype.clearVoiceVolumeInfo = function() {
  return this.setVoiceVolumeInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speechService.SetVoiceVolumeRequest.prototype.hasVoiceVolumeInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechService.SetVoiceVolumeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.speechService.SetVoiceVolumeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechService.SetVoiceVolumeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechService.SetVoiceVolumeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    voiceVolumeInfo: (f = msg.getVoiceVolumeInfo()) && proto.speechService.VoiceVolumeInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechService.SetVoiceVolumeResponse}
 */
proto.speechService.SetVoiceVolumeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechService.SetVoiceVolumeResponse;
  return proto.speechService.SetVoiceVolumeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechService.SetVoiceVolumeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechService.SetVoiceVolumeResponse}
 */
proto.speechService.SetVoiceVolumeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.speechService.VoiceVolumeInfo;
      reader.readMessage(value,proto.speechService.VoiceVolumeInfo.deserializeBinaryFromReader);
      msg.setVoiceVolumeInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechService.SetVoiceVolumeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechService.SetVoiceVolumeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechService.SetVoiceVolumeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechService.SetVoiceVolumeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVoiceVolumeInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.speechService.VoiceVolumeInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional VoiceVolumeInfo voice_volume_info = 1;
 * @return {?proto.speechService.VoiceVolumeInfo}
 */
proto.speechService.SetVoiceVolumeResponse.prototype.getVoiceVolumeInfo = function() {
  return /** @type{?proto.speechService.VoiceVolumeInfo} */ (
    jspb.Message.getWrapperField(this, proto.speechService.VoiceVolumeInfo, 1));
};


/**
 * @param {?proto.speechService.VoiceVolumeInfo|undefined} value
 * @return {!proto.speechService.SetVoiceVolumeResponse} returns this
*/
proto.speechService.SetVoiceVolumeResponse.prototype.setVoiceVolumeInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.speechService.SetVoiceVolumeResponse} returns this
 */
proto.speechService.SetVoiceVolumeResponse.prototype.clearVoiceVolumeInfo = function() {
  return this.setVoiceVolumeInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speechService.SetVoiceVolumeResponse.prototype.hasVoiceVolumeInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechService.GetVoiceVolumeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.speechService.GetVoiceVolumeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechService.GetVoiceVolumeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechService.GetVoiceVolumeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechService.GetVoiceVolumeRequest}
 */
proto.speechService.GetVoiceVolumeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechService.GetVoiceVolumeRequest;
  return proto.speechService.GetVoiceVolumeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechService.GetVoiceVolumeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechService.GetVoiceVolumeRequest}
 */
proto.speechService.GetVoiceVolumeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechService.GetVoiceVolumeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechService.GetVoiceVolumeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechService.GetVoiceVolumeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechService.GetVoiceVolumeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechService.GetVoiceVolumeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.speechService.GetVoiceVolumeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechService.GetVoiceVolumeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechService.GetVoiceVolumeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    voiceVolumeInfo: (f = msg.getVoiceVolumeInfo()) && proto.speechService.VoiceVolumeInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechService.GetVoiceVolumeResponse}
 */
proto.speechService.GetVoiceVolumeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechService.GetVoiceVolumeResponse;
  return proto.speechService.GetVoiceVolumeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechService.GetVoiceVolumeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechService.GetVoiceVolumeResponse}
 */
proto.speechService.GetVoiceVolumeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.speechService.VoiceVolumeInfo;
      reader.readMessage(value,proto.speechService.VoiceVolumeInfo.deserializeBinaryFromReader);
      msg.setVoiceVolumeInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechService.GetVoiceVolumeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechService.GetVoiceVolumeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechService.GetVoiceVolumeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechService.GetVoiceVolumeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVoiceVolumeInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.speechService.VoiceVolumeInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional VoiceVolumeInfo voice_volume_info = 1;
 * @return {?proto.speechService.VoiceVolumeInfo}
 */
proto.speechService.GetVoiceVolumeResponse.prototype.getVoiceVolumeInfo = function() {
  return /** @type{?proto.speechService.VoiceVolumeInfo} */ (
    jspb.Message.getWrapperField(this, proto.speechService.VoiceVolumeInfo, 1));
};


/**
 * @param {?proto.speechService.VoiceVolumeInfo|undefined} value
 * @return {!proto.speechService.GetVoiceVolumeResponse} returns this
*/
proto.speechService.GetVoiceVolumeResponse.prototype.setVoiceVolumeInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.speechService.GetVoiceVolumeResponse} returns this
 */
proto.speechService.GetVoiceVolumeResponse.prototype.clearVoiceVolumeInfo = function() {
  return this.setVoiceVolumeInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speechService.GetVoiceVolumeResponse.prototype.hasVoiceVolumeInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechService.SetParamsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.speechService.SetParamsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechService.SetParamsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechService.SetParamsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    params: msg.getParams_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechService.SetParamsRequest}
 */
proto.speechService.SetParamsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechService.SetParamsRequest;
  return proto.speechService.SetParamsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechService.SetParamsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechService.SetParamsRequest}
 */
proto.speechService.SetParamsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechService.SetParamsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechService.SetParamsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechService.SetParamsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechService.SetParamsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParams_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes params = 1;
 * @return {!(string|Uint8Array)}
 */
proto.speechService.SetParamsRequest.prototype.getParams = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes params = 1;
 * This is a type-conversion wrapper around `getParams()`
 * @return {string}
 */
proto.speechService.SetParamsRequest.prototype.getParams_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getParams()));
};


/**
 * optional bytes params = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getParams()`
 * @return {!Uint8Array}
 */
proto.speechService.SetParamsRequest.prototype.getParams_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getParams()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.speechService.SetParamsRequest} returns this
 */
proto.speechService.SetParamsRequest.prototype.setParams = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechService.SetParamsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.speechService.SetParamsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechService.SetParamsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechService.SetParamsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechService.SetParamsResponse}
 */
proto.speechService.SetParamsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechService.SetParamsResponse;
  return proto.speechService.SetParamsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechService.SetParamsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechService.SetParamsResponse}
 */
proto.speechService.SetParamsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechService.SetParamsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechService.SetParamsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechService.SetParamsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechService.SetParamsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.speechService.SpeechEvent = {
  UNKNOWN_EVENT: 0,
  WAKE_UP: 1,
  HIBERNATE: 2,
  ERROR: 3,
  VAD: 4,
  RESULT: 5,
  TTS_START: 6,
  TTS_END: 7
};

/**
 * @enum {number}
 */
proto.speechService.ErrorType = {
  UNKNOWN_ERROR_TYPE: 0,
  ERR_TIMEOUT: 1,
  ERR_PARAMS: 2,
  ERR_AUTH: 3,
  ERR_NETWORK: 4,
  ERR_NOT_READY: 5,
  ERR_CONFIG: 6
};

/**
 * @enum {number}
 */
proto.speechService.VadType = {
  UNKNOWN_VAD_TYPE: 0,
  START: 1,
  END: 2,
  TIMEOUT: 3,
  VOLUME_CHANGE: 4
};

goog.object.extend(exports, proto.speechService);
