# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import speech_pb2 as speech__pb2


class SpeechServiceStub(object):
    """speechService.SpeechService 语音服务

    开发管理平台功能参考: http://10.10.10.2/speech
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListenSpeechEvent = channel.unary_stream(
                '/speechService.SpeechService/ListenSpeechEvent',
                request_serializer=speech__pb2.ListenSpeechEventRequest.SerializeToString,
                response_deserializer=speech__pb2.ListenSpeechEventResponse.FromString,
                )
        self.TextToSpeech = channel.unary_unary(
                '/speechService.SpeechService/TextToSpeech',
                request_serializer=speech__pb2.TextToSpeechRequest.SerializeToString,
                response_deserializer=speech__pb2.TextToSpeechResponse.FromString,
                )
        self.SpeechStop = channel.unary_unary(
                '/speechService.SpeechService/SpeechStop',
                request_serializer=speech__pb2.SpeechStopRequest.SerializeToString,
                response_deserializer=speech__pb2.SpeechStopResponse.FromString,
                )
        self.WakeUp = channel.unary_unary(
                '/speechService.SpeechService/WakeUp',
                request_serializer=speech__pb2.WakeUpRequest.SerializeToString,
                response_deserializer=speech__pb2.WakeUpResponse.FromString,
                )
        self.Hibernate = channel.unary_unary(
                '/speechService.SpeechService/Hibernate',
                request_serializer=speech__pb2.HibernateRequest.SerializeToString,
                response_deserializer=speech__pb2.HibernateResponse.FromString,
                )
        self.SetVoiceVolume = channel.unary_unary(
                '/speechService.SpeechService/SetVoiceVolume',
                request_serializer=speech__pb2.SetVoiceVolumeRequest.SerializeToString,
                response_deserializer=speech__pb2.SetVoiceVolumeResponse.FromString,
                )
        self.GetVoiceVolume = channel.unary_unary(
                '/speechService.SpeechService/GetVoiceVolume',
                request_serializer=speech__pb2.GetVoiceVolumeRequest.SerializeToString,
                response_deserializer=speech__pb2.GetVoiceVolumeResponse.FromString,
                )
        self.SetParams = channel.unary_unary(
                '/speechService.SpeechService/SetParams',
                request_serializer=speech__pb2.SetParamsRequest.SerializeToString,
                response_deserializer=speech__pb2.SetParamsResponse.FromString,
                )


class SpeechServiceServicer(object):
    """speechService.SpeechService 语音服务

    开发管理平台功能参考: http://10.10.10.2/speech
    """

    def ListenSpeechEvent(self, request, context):
        """ListenSpeechEvent 监听语音事件

        语音内容识别支持单句多次返回，请留意完整句标识

        详见SpeechEvent
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TextToSpeech(self, request, context):
        """TextToSpeech 文本转语音

        新的TTS请求将立即中断当前语音，
        需要结束后播放新语音应监听TTS_END事件后再进行新的请求。

        TTS方法支持在休眠状态下调用
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpeechStop(self, request, context):
        """SpeechStop 中止语音

        通过此方法进行打断不会产生TTS_END事件
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WakeUp(self, request, context):
        """WakeUp 唤醒

        唤醒后开始监听语音输入
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Hibernate(self, request, context):
        """Hibernate 休眠

        休眠后不再监听语音输入
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetVoiceVolume(self, request, context):
        """SetVoiceVolume 设置语音音量
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVoiceVolume(self, request, context):
        """GetVoiceVolume 查询语音音量
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetParams(self, request, context):
        """SetParams 配置参数

        此方法通常为开发用户在开发过程中进行一次性配置
        不建议不了解该配置文件的用户进行参数设置

        AIUI模块参数配置参考:
        https://doc.iflyos.cn/aiui/sdk/smart_doc/config_file.html#配置文件
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SpeechServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListenSpeechEvent': grpc.unary_stream_rpc_method_handler(
                    servicer.ListenSpeechEvent,
                    request_deserializer=speech__pb2.ListenSpeechEventRequest.FromString,
                    response_serializer=speech__pb2.ListenSpeechEventResponse.SerializeToString,
            ),
            'TextToSpeech': grpc.unary_unary_rpc_method_handler(
                    servicer.TextToSpeech,
                    request_deserializer=speech__pb2.TextToSpeechRequest.FromString,
                    response_serializer=speech__pb2.TextToSpeechResponse.SerializeToString,
            ),
            'SpeechStop': grpc.unary_unary_rpc_method_handler(
                    servicer.SpeechStop,
                    request_deserializer=speech__pb2.SpeechStopRequest.FromString,
                    response_serializer=speech__pb2.SpeechStopResponse.SerializeToString,
            ),
            'WakeUp': grpc.unary_unary_rpc_method_handler(
                    servicer.WakeUp,
                    request_deserializer=speech__pb2.WakeUpRequest.FromString,
                    response_serializer=speech__pb2.WakeUpResponse.SerializeToString,
            ),
            'Hibernate': grpc.unary_unary_rpc_method_handler(
                    servicer.Hibernate,
                    request_deserializer=speech__pb2.HibernateRequest.FromString,
                    response_serializer=speech__pb2.HibernateResponse.SerializeToString,
            ),
            'SetVoiceVolume': grpc.unary_unary_rpc_method_handler(
                    servicer.SetVoiceVolume,
                    request_deserializer=speech__pb2.SetVoiceVolumeRequest.FromString,
                    response_serializer=speech__pb2.SetVoiceVolumeResponse.SerializeToString,
            ),
            'GetVoiceVolume': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVoiceVolume,
                    request_deserializer=speech__pb2.GetVoiceVolumeRequest.FromString,
                    response_serializer=speech__pb2.GetVoiceVolumeResponse.SerializeToString,
            ),
            'SetParams': grpc.unary_unary_rpc_method_handler(
                    servicer.SetParams,
                    request_deserializer=speech__pb2.SetParamsRequest.FromString,
                    response_serializer=speech__pb2.SetParamsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'speechService.SpeechService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SpeechService(object):
    """speechService.SpeechService 语音服务

    开发管理平台功能参考: http://10.10.10.2/speech
    """

    @staticmethod
    def ListenSpeechEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/speechService.SpeechService/ListenSpeechEvent',
            speech__pb2.ListenSpeechEventRequest.SerializeToString,
            speech__pb2.ListenSpeechEventResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TextToSpeech(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/speechService.SpeechService/TextToSpeech',
            speech__pb2.TextToSpeechRequest.SerializeToString,
            speech__pb2.TextToSpeechResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SpeechStop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/speechService.SpeechService/SpeechStop',
            speech__pb2.SpeechStopRequest.SerializeToString,
            speech__pb2.SpeechStopResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WakeUp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/speechService.SpeechService/WakeUp',
            speech__pb2.WakeUpRequest.SerializeToString,
            speech__pb2.WakeUpResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Hibernate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/speechService.SpeechService/Hibernate',
            speech__pb2.HibernateRequest.SerializeToString,
            speech__pb2.HibernateResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetVoiceVolume(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/speechService.SpeechService/SetVoiceVolume',
            speech__pb2.SetVoiceVolumeRequest.SerializeToString,
            speech__pb2.SetVoiceVolumeResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetVoiceVolume(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/speechService.SpeechService/GetVoiceVolume',
            speech__pb2.GetVoiceVolumeRequest.SerializeToString,
            speech__pb2.GetVoiceVolumeResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetParams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/speechService.SpeechService/SetParams',
            speech__pb2.SetParamsRequest.SerializeToString,
            speech__pb2.SetParamsResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
