# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import network_pb2 as network__pb2


class NetworkServiceStub(object):
    """networkService.NetworkService 网络管理

    管理内部路由设备

    开发管理平台功能参考: http://10.10.10.2/network
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListNetworks = channel.unary_stream(
                '/networkService.NetworkService/ListNetworks',
                request_serializer=network__pb2.ListNetworksRequest.SerializeToString,
                response_deserializer=network__pb2.ListNetworksResponse.FromString,
                )
        self.Connect = channel.unary_unary(
                '/networkService.NetworkService/Connect',
                request_serializer=network__pb2.ConnectRequest.SerializeToString,
                response_deserializer=network__pb2.ConnectResponse.FromString,
                )
        self.GetStatus = channel.unary_stream(
                '/networkService.NetworkService/GetStatus',
                request_serializer=network__pb2.GetStatusRequest.SerializeToString,
                response_deserializer=network__pb2.GetStatusResponse.FromString,
                )
        self.GetNetworkDeviceInfo = channel.unary_unary(
                '/networkService.NetworkService/GetNetworkDeviceInfo',
                request_serializer=network__pb2.GetNetworkDeviceInfoRequest.SerializeToString,
                response_deserializer=network__pb2.GetNetworkDeviceInfoResponse.FromString,
                )
        self.UpdateNetworkDeviceInfo = channel.unary_unary(
                '/networkService.NetworkService/UpdateNetworkDeviceInfo',
                request_serializer=network__pb2.UpdateNetworkDeviceInfoRequest.SerializeToString,
                response_deserializer=network__pb2.UpdateNetworkDeviceInfoResponse.FromString,
                )


class NetworkServiceServicer(object):
    """networkService.NetworkService 网络管理

    管理内部路由设备

    开发管理平台功能参考: http://10.10.10.2/network
    """

    def ListNetworks(self, request, context):
        """ListNetworks 扫描附近无线信息

        此方法在同一扫描时刻中为单例

        360路由设备：
        由于持续扫描可能造成内部网络的断流，因此该类型路由不会进行后续的自动持续扫描，
        但持续监听支持后续新请求结果的同步返回
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Connect(self, request, context):
        """Connect 路由设备连接无线网络

        连接失败将立即返回错误
        若30秒后成功获取状态将返回超时失败
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStatus(self, request, context):
        """GetStatus 获取路由连接状态
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNetworkDeviceInfo(self, request, context):
        """GetNetworkDeviceInfo 获取路由设备相关信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateNetworkDeviceInfo(self, request, context):
        """UpdateNetworkDeviceInfo 修改网络设备相关信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NetworkServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListNetworks': grpc.unary_stream_rpc_method_handler(
                    servicer.ListNetworks,
                    request_deserializer=network__pb2.ListNetworksRequest.FromString,
                    response_serializer=network__pb2.ListNetworksResponse.SerializeToString,
            ),
            'Connect': grpc.unary_unary_rpc_method_handler(
                    servicer.Connect,
                    request_deserializer=network__pb2.ConnectRequest.FromString,
                    response_serializer=network__pb2.ConnectResponse.SerializeToString,
            ),
            'GetStatus': grpc.unary_stream_rpc_method_handler(
                    servicer.GetStatus,
                    request_deserializer=network__pb2.GetStatusRequest.FromString,
                    response_serializer=network__pb2.GetStatusResponse.SerializeToString,
            ),
            'GetNetworkDeviceInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNetworkDeviceInfo,
                    request_deserializer=network__pb2.GetNetworkDeviceInfoRequest.FromString,
                    response_serializer=network__pb2.GetNetworkDeviceInfoResponse.SerializeToString,
            ),
            'UpdateNetworkDeviceInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateNetworkDeviceInfo,
                    request_deserializer=network__pb2.UpdateNetworkDeviceInfoRequest.FromString,
                    response_serializer=network__pb2.UpdateNetworkDeviceInfoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'networkService.NetworkService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NetworkService(object):
    """networkService.NetworkService 网络管理

    管理内部路由设备

    开发管理平台功能参考: http://10.10.10.2/network
    """

    @staticmethod
    def ListNetworks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/networkService.NetworkService/ListNetworks',
            network__pb2.ListNetworksRequest.SerializeToString,
            network__pb2.ListNetworksResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Connect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/networkService.NetworkService/Connect',
            network__pb2.ConnectRequest.SerializeToString,
            network__pb2.ConnectResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/networkService.NetworkService/GetStatus',
            network__pb2.GetStatusRequest.SerializeToString,
            network__pb2.GetStatusResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNetworkDeviceInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/networkService.NetworkService/GetNetworkDeviceInfo',
            network__pb2.GetNetworkDeviceInfoRequest.SerializeToString,
            network__pb2.GetNetworkDeviceInfoResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateNetworkDeviceInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/networkService.NetworkService/UpdateNetworkDeviceInfo',
            network__pb2.UpdateNetworkDeviceInfoRequest.SerializeToString,
            network__pb2.UpdateNetworkDeviceInfoResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
